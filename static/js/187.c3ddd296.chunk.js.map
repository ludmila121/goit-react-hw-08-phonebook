{"version":3,"file":"static/js/187.c3ddd296.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactListItem/ContactListItem.styled.js","components/ContactList/ContactListItem/ContactListItem.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","views/ContactsView.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const isLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n\nexport const getVisibleContacts = createSelector(\n  getContacts,\n  getFilter,\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  margin-right: 10px;\n`;\n\nexport const ErrorText = styled.p`\n  color: red;\n`;\n","import * as yup from 'yup';\nimport Notiflix from 'notiflix';\nimport { ErrorMessage, Form, Formik, Field } from 'formik';\nimport { ErrorText, Label } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts/contactsSelectors';\nimport { postContact } from 'redux/contacts/contactsOperations';\nimport { nanoid } from 'nanoid';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(/(^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$)/, {\n      message:\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n    })\n    .required(),\n\n  number: yup\n    .string()\n    .matches(\n      /(\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9})/,\n      {\n        message:\n          'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n      }\n    )\n    .required(),\n});\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const setContact = contact => dispatch(postContact(contact));\n  const addContact = (name, number) => {\n    const contact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n    const currentName = name.toLowerCase();\n    const matchName = contacts.some(\n      ({ name }) => name.toLowerCase() === currentName\n    );\n    matchName\n      ? Notiflix.Notify.failure(`${name} is already in contacts`)\n      : setContact(contact);\n  };\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n    addContact(name, number);\n    resetForm();\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <Label>\n          Name\n          <Field name=\"name\" type=\"text\" />\n          <FormError name=\"name\" />\n        </Label>\n        <Label>\n          Number\n          <Field name=\"number\" type=\"tel\" />\n          <FormError name=\"number\" />\n        </Label>\n        <button type=\"submit\">Add contact</button>\n      </Form>\n    </Formik>\n  );\n};\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const ContactData = styled.p`\n  margin-top: 5px;\n  margin-bottom: 5px;\n`;\n\nexport const ContactsItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { ContactData, ContactsItem } from './ContactListItem.styled';\n\nconst ContactListItem = ({ id, name, number, onDeleteContact }) => {\n  return (\n    <ContactsItem>\n      <ContactData>\n        {name}:{number}\n      </ContactData>\n      <button onClick={() => onDeleteContact(id)}>Delete</button>\n    </ContactsItem>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  onDeleteContact: PropTypes.func.isRequired,\n};\nexport default ContactListItem;\n","import styled from 'styled-components';\n\nexport const Contacts = styled.ul`\n  margin-right: auto;\n  margin-left: auto;\n  margin-bottom: 10px;\n\n  padding: 0;\n  width: 450px;\n  text-align: center;\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactListItem from './ContactListItem/ContactListItem';\nimport { Contacts } from './ContactList.styled';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport { getVisibleContacts } from 'redux/contacts/contactsSelectors';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const deleteContactItem = contactId => dispatch(deleteContact(contactId));\n  const contacts = useSelector(getVisibleContacts);\n  return (\n    <Contacts>\n      {contacts.map(({ id, name, number }) => (\n        <ContactListItem\n          key={id}\n          name={name}\n          number={number}\n          onDeleteContact={() => deleteContactItem(id)}\n        />\n      ))}\n    </Contacts>\n  );\n};\nexport default ContactList;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/contacts/contactsSelectors';\nimport { changeFilter } from 'redux/contacts/contactsActions';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const setFilter = e => dispatch(changeFilter(e.currentTarget.value));\n\n  return (\n    <label>\n      Find contacts by name\n      <input type=\"text\" value={filter} onChange={setFilter} />\n    </label>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getVisibleContacts } from 'redux/contacts/contactsSelectors';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nexport default function ContactView() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n    return;\n  }, [dispatch]);\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {contacts.length > 0 ? (\n        <ContactList contact={contacts} />\n      ) : (\n        <p>Phonebook is empty</p>\n      )}\n    </>\n  );\n}\n"],"names":["getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","Label","styled","ErrorText","schema","yup","shape","matches","message","required","number","FormError","render","initialValues","dispatch","useDispatch","useSelector","addContact","contact","id","nanoid","currentName","some","Notiflix","postContact","setContact","validationSchema","onSubmit","values","resetForm","type","ContactData","ContactsItem","onDeleteContact","onClick","Contacts","map","contactId","deleteContact","Filter","value","onChange","e","changeFilter","currentTarget","ContactView","useEffect","fetchContacts","length"],"sourceRoot":""}